@page "/PublisherAdministration"
@using Microsoft.AspNetCore.Identity
@using PubHubWebServer.Data
@using PubHubWebServer.Services
@using PubHubWebServer.Data.Models
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using System.Text.Json
@using System.Text

@inject HttpClient client
@inject NavigationManager navigationManager
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> SigninManager
@inject IPubHubServices Service


@rendermode InteractiveServer

@attribute [Authorize(Roles = "Publisher")]

<div class="row h-100">
    @* Left side*@
    <div class="col-auto col-md-6" style="background-color:blue">
        <div class="d-flex">
            <input class="col-2" placeholder="Title" />
            <input class="col-2" placeholder="stateDate" />
            <input class="col-2" placeholder="endDate" />
            <input class="col-1" placeholder="state" />
            <input class="col-2" placeholder="other" />
            <input class="col-2" placeholder="last" />
            <button class="col-1">Filter</button>
        </div>

        @*TODO: foreach item in the subscription list*@
        @foreach (PubHubSubscription subscription in Subscriptions)
        {
            <div class="d-flex align-content-center m-1 align-items-center" style="background-color:pink;">
                <div class="pe-1 col-3"> @subscription.Title</div>
                <div class="pe-1 col-2"> State: @subscription.Active </div>
                <div class="pe-1 col-3"> Subscribers: 1234</div>
                <div class="pe-1 col-3"> Total: 1234,56 DKK</div>
                <a href="#" class="btn btn-check col-1">Edit</a>@*This should go to the subscription page so that the publisher can edit the subscription*@
            </div>
        }
        <div class="pull-right bottom-right">
            <a class="btn border" href="#">
                New Subscription
            </a>
        </div>
    </div>

    @*Right side*@
    <div class="col-auto col-md-6" style="background-color:yellow">
        <div class="mb-1">
            @foreach (PubHubEBook eBook in Ebooks.OrderByDescending(x => x.DownloadCount).Take(5))
            {
                <a href="#" class="row text-decoration-none" style="background-color:green;">
                    @*This should go to the books page*@
                    <div class="col-4">@eBook.Title</div>
                    <div class="col-3">@eBook.AuthorNames</div>
                    <div class="col-2">Downloads: @eBook.DownloadCount</div>
                    <a class="col-3"></a>
                </a>
            }

        </div>
        <div class="mt-1 mb-1">
            <div class="row" style="background-color:lime;">
                <div class="col-4">Subscription Name</div>
                <div class="col-4">Income: 1234.56 DKK</div>
                <div class="col-4">Subscriber antal: 12345</div>

            </div>
            <div class="row" style="background-color:deepskyblue;">
                <div class="col-4">Alle subscriptions</div>
                <div class="col-4">Total Income: 12345.67 DKK</div>
                <div class="col-4">Total subs: 123456</div>
            </div>
        </div>
        <div class="mt-1 mb-1">
            <div class="row" style="background-color:deeppink;">
                <div class="col-4">Top Book: This is the book name</div>
                <div class="col-4">Income: 1234.56 DKK</div>
                <div class="col-4">Subscriber antal: 123</div>
            </div>
            <div class="row" style="background-color:pink;">
                <div class="col-4">All books</div>
                <div class="col-4">Total Income: 1234.56 DKK</div>
                <div class="col-4">Total Subs: 123567</div>
            </div>
        </div>
        <div>
            <a class="btn border" href="#">See all books</a>
        </div>
    </div>
</div>
<AuthorizeView>
    Hello @context.User.Identity?.Name!
    @Subscriptions.Count()
    @Ebooks.Count()
</AuthorizeView>


@code {
    public List<PubHubSubscription> Subscriptions { get; set; } = new();
    public List<PubHubEBook> Ebooks { get; set; } = new();

    public PubHubEBook TopBook { get; set; }
    public double TopBookIncome { get; set; }
    public int TopBookSubs { get; set; }
    public PubHubSubscription TopSubscrioption { get; set; }
    public double TopSubIncome { get; set; }
    public int TopSubSubs { get; set; }

    public PubHubEBook Book { get; set; }
    protected override async Task OnInitializedAsync()
    {
        if (Subscriptions.Count == 0)
        {
            ClaimsPrincipal claimsPrincipal = SigninManager.Context.User;

            ApplicationUser user = await userManager.GetUserAsync(claimsPrincipal);

            //All subscriptions on the publisher
            ApiResponse<List<PubHubSubscription>> ApiSubs = await Service.GetAllPublishersSubscriptions(user.MyPubHubAccount, claimsPrincipal);
            Subscriptions = ApiSubs.Data;

            //The top subscription
            ApiResponse<List< PubHubSubscription>> ApiTopSub = await Service.GetTopSubscriptions(1, user.MyPubHubAccount);
            TopSubscrioption = ApiTopSub.Data.First();

            //The income from the top subscription
            ApiResponse<double> IncomeFromTopSub = await Service.GetTotalErningsFromSubscription(TopSubscrioption.SubscriptionID);
            TopSubIncome = IncomeFromTopSub.Data;



            // ApiResponse<List<PubHubEBook>> apiBooks = await Service.GetTopBooks(claimsPrincipal, 5, user.MyPubHubAccount);
            // Ebooks = apiBooks.Data;

            // ApiResponse<double> ApiTopFromBook = await Service.GetTotalFromAcquired(Ebooks.OrderByDescending(x => x.DownloadCount).First().EBookID);
            // TopBookIncome = ApiTopFromBook.Data;
        }
        await base.OnInitializedAsync();
    }
}
