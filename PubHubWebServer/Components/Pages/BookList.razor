@page "/BookList"
@using PubHubWebServer.Services
@using PubHubWebServer.Data.Models

@inject IPubHubServices _Services
@rendermode InteractiveServer

@inject HttpClient client
@inject NavigationManager navManager

<div class="row pb-3">
    <input type="text" @bind="InputTitle" class="col-3" placeholder="Title" />
    <input type="text" @bind="InputAuthor" class="col-3" placeholder="Author" />
    <input type="text" @bind="InputGenre" class="col-3" placeholder="Genre" />
    <button @onclick="() => SetFilter(0)" class="btn btn-primary col-3">Set Filters</button>
</div>

<div class="row row-cols-1 row-cols-md-2 row-cols-xl-5 g-4">
    @if (bookList != null)
    {
        foreach (PubHubEBook eBook in bookList)
        {
            <div class="col-sm-1 col-md-1 col-lg-1 col-xl-1" style="min-width:235px; margin:15px">
                <div class="card" style="min-height:100%;">
                    <img src="images/BookCovers/@(eBook.FilePath + ".jpg")" class="card-img-top img-thumbnail" alt="..." style="max-width: 100%;">
                    <div class="card-body">
                        <h5 class="card-title text-dark">@eBook.Title</h5>
                        @{
                            if (eBook.Description.Length >= 100)
                            {
                                <p class="card-text text-dark">@(eBook.Description.Substring(0, 100) + "...")</p>
                            }
                            else if (eBook.Description.Length >= 50)
                            {
                                <p class="card-text text-dark">@(eBook.Description.Substring(0, 50) + "...")</p>
                            }
                            else
                            {
                                <p class="card-text text-dark">@(eBook.Description)</p>
                            }
                        }
                        
                    </div>
                    <div class="card-footer text-dark">
                        <div class="row">
                            <div class="col-10">
                                <p class="m-auto" style="font-size:11px;">Author's: @eBook.AuthorNames</p>
                            </div>
                            <div class="col-2">
                                <NavLink class="nav-link p-0 m-auto" href="@($"/BookDetail/{eBook.EBookID}")">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="text-dark" class="bi bi-info-circle" viewBox="0 0 16 16">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                                        <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0" />
                                    </svg>
                                </NavLink>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

<div class="d-flex align-content-center">
    <div class="w-100">
        <button class="p-2 btn btn-primary" @onclick="() => SetFilter(0)">&#8606;</button> @*Back to fist page *@
        <button class="p-2 btn btn-primary" @onclick="() => SetFilter(AtPage - 1)">&#8592</button> @*Back 1 page*@

        <button class="p-2 btn btn-primary" @onclick="() => SetFilter(AtPage + 1)">&#8594</button> @*forward 1 page*@
    </div>
</div>

@code {

    public List<PubHubEBook> bookList { get; set; } = new();
    private string InputTitle = "";
    private string InputAuthor = "";
    private string InputGenre = "";
    public int AtPage { get; set; } = 0;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (bookList.Count == 0)
        {

            var responce = await _Services.GetBooksByFilter();

            if (responce?.Data != null)
            {
                bookList = responce.Data;
            }

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);

    }

    /// <summary>
    /// Gets first X amount of books from the inputed filter options
    /// </summary>
    private async Task SetFilter(int _AtPage)
    {
        if (_AtPage > 0)
        {
            var responce = await _Services.GetBooksByFilter(InputTitle, InputAuthor, InputGenre, _AtPage);

            if (responce?.Data != null)
            {
                bookList = responce.Data;
            }
            StateHasChanged();

            if (_AtPage > AtPage)
            {
                AtPage++;
            }
            else if (_AtPage < AtPage)
            {
                AtPage--;
            }
        }
        else
        {

            var responce = await _Services.GetBooksByFilter(InputTitle, InputAuthor, InputGenre, 0);

            if (responce?.Data != null)
            {
                bookList = responce.Data;
            }
            AtPage = 0;
        }
    }
}
