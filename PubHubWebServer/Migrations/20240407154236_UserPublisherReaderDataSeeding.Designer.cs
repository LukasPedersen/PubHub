// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PubHubWebServer.Data;

#nullable disable

namespace PubHubWebServer.Migrations
{
    [DbContext(typeof(PubHubDBContext))]
    [Migration("20240407154236_UserPublisherReaderDataSeeding")]
    partial class UserPublisherReaderDataSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.PubHubEBook", b =>
                {
                    b.Property<Guid>("EBookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("BorrowPrice")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DownloadCount")
                        .HasColumnType("bigint");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EBookID");

                    b.ToTable("EBooks");
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.PubHubLog", b =>
                {
                    b.Property<Guid>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LogType")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("LogID");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.PubHubPublisher", b =>
                {
                    b.Property<Guid>("PublisherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublisherID");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherID = new Guid("55b8ac25-a197-4a0b-9cd7-2cd0757d4bb7"),
                            ApplicationUserId = "b0ac36a6-d5a1-4810-8d3d-14bf2acb7fb7",
                            Name = "Forlaget Mellemgaard"
                        },
                        new
                        {
                            PublisherID = new Guid("a5e7136a-629f-4921-b5d9-83d674c341bd"),
                            ApplicationUserId = "fd0c4ce7-d5e2-451a-acc9-3b04dce524e0",
                            Name = "Buster Nordic"
                        });
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.PubHubReader", b =>
                {
                    b.Property<Guid>("ReaderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReaderID");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Readers");

                    b.HasData(
                        new
                        {
                            ReaderID = new Guid("3a899400-48de-4672-9c79-a975230bb1d8"),
                            ApplicationUserId = "b3edbc03-221d-4057-a1a4-ebb950122785"
                        },
                        new
                        {
                            ReaderID = new Guid("2cc99d57-3963-4d76-8d07-3e3a8d79a615"),
                            ApplicationUserId = "f097dc4b-e443-4256-bd76-10514f549836"
                        });
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.PubHubReceipt", b =>
                {
                    b.Property<Guid>("ReceiptID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Acquired")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ReceiptID");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.PubHubSubscription", b =>
                {
                    b.Property<Guid>("SubscriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubscriptionID");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.Relationships.PubHubEBookPubHubPublisher", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EBookID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PublisherID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("EBookID");

                    b.HasIndex("PublisherID");

                    b.ToTable("EBookPublishers");
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.Relationships.PubHubEBookPubHubReader", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EBookID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReaderID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("EBookID");

                    b.HasIndex("ReaderID");

                    b.ToTable("EBookReaders");
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.Relationships.PubHubEBookPubHubSubscription", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EBookID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubscriptionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("EBookID");

                    b.HasIndex("SubscriptionID");

                    b.ToTable("EBookSubscriptions");
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.Relationships.PubHubSubscriptionPubHubReader", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReaderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubscriptionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ReaderID");

                    b.HasIndex("SubscriptionID");

                    b.ToTable("PubHubSubscriptionPubHubReader");
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.Relationships.PubHubSupscriptionPubHubPublisher", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PublisherID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubscriptionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("PublisherID");

                    b.HasIndex("SubscriptionID");

                    b.ToTable("PubHubSupscriptionPubHubPublisher");
                });

            modelBuilder.Entity("PubHubWebServer.Data.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("MyPubHubAccount")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "b0ac36a6-d5a1-4810-8d3d-14bf2acb7fb7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b8fdbf6-ed5a-4b82-aaf4-dd4d5e080d52",
                            Email = "Mellemgaard@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MELLEMGAARD@HOTMAIL.COM",
                            NormalizedUserName = "FORLAGET MELLEMGAARD",
                            PasswordHash = "AQAAAAIAAYagAAAAEEmqQe/vndhXqRlDxRsxGHAX1kuWQ117TY6XF/XEO905889tcX+x5AeDq4eyXySWEQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "TBBRBHXVDKL4JYRX5YZLFTX56P76CYKO",
                            TwoFactorEnabled = false,
                            UserName = "Forlaget Mellemgaard",
                            Active = true,
                            MyPubHubAccount = new Guid("55b8ac25-a197-4a0b-9cd7-2cd0757d4bb7")
                        },
                        new
                        {
                            Id = "fd0c4ce7-d5e2-451a-acc9-3b04dce524e0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "653cb2db-6f92-4eda-8288-ec972843ad9d",
                            Email = "Nordic@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NORDIC@HOTMAIL.COM",
                            NormalizedUserName = "BUSTER NORDIC",
                            PasswordHash = "AQAAAAIAAYagAAAAEKpF63VYci9tx6jT7M6RwfqLpgvmA5W8iFFOyOVJZsXZ+5ozXHv+vVhSZ4iBWDHRDA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NQUEGF4VUUD7QGUA4XP5YNMDMLT5US6H",
                            TwoFactorEnabled = false,
                            UserName = "Buster Nordic",
                            Active = true,
                            MyPubHubAccount = new Guid("a5e7136a-629f-4921-b5d9-83d674c341bd")
                        },
                        new
                        {
                            Id = "b3edbc03-221d-4057-a1a4-ebb950122785",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e82c37ba-22be-4f0a-ac8b-23a62c11476a",
                            Email = "lukas3302@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "LUKAS3302@HOTMAIL.COM",
                            NormalizedUserName = "LUKAS",
                            PasswordHash = "AQAAAAIAAYagAAAAEPsl/YnmLOop8Q3eHEXfKy0CTTI7Vpm2pWEn64idVqozxtLVvtcr4Uf1iyRbshmsIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "GLY234PA27LVMGEQEBJERG7KGRXQSRDU",
                            TwoFactorEnabled = false,
                            UserName = "Lukas Pedersen",
                            Active = true,
                            MyPubHubAccount = new Guid("3a899400-48de-4672-9c79-a975230bb1d8")
                        },
                        new
                        {
                            Id = "f097dc4b-e443-4256-bd76-10514f549836",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d317d42c-6ab7-4ece-b9c4-4210d3c2f009",
                            Email = "Jens2837@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JENS2837@HOTMAIL.COM",
                            NormalizedUserName = "JENS ANKER",
                            PasswordHash = "AQAAAAIAAYagAAAAEH5hcJHlyO7YeqMGmZqDju46u5EHka/NiKKqqJHKpbq3jEiI5UT1tsVlUp4ziDa+5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "FT4UX4Y6TUBDTMWYUAIVE622QJ6GHBOG",
                            TwoFactorEnabled = false,
                            UserName = "Jens Anker",
                            Active = true,
                            MyPubHubAccount = new Guid("2cc99d57-3963-4d76-8d07-3e3a8d79a615")
                        },
                        new
                        {
                            Id = "827d7ed4-9a22-4b6b-aeb8-6919a672bedc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4d4b000-df14-4c3e-9f89-73a90c4a8584",
                            Email = "Admin@hotmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOTMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEI7YCzKIQOnqgMycVwCJ/45d4njC5tjma1AFeC1Z/YuJ2ZD91x+B90FvXluwB3qZvw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "GP4QLQ2ZVJJBYBHBQLLGP4G22UJJFH4U",
                            TwoFactorEnabled = false,
                            UserName = "Admin",
                            Active = true,
                            MyPubHubAccount = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.HasOne("PubHubWebServer.Data.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.PubHubPublisher", b =>
                {
                    b.HasOne("PubHubWebServer.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.PubHubReader", b =>
                {
                    b.HasOne("PubHubWebServer.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.Relationships.PubHubEBookPubHubPublisher", b =>
                {
                    b.HasOne("PubHubWebServer.Data.Models.PubHubEBook", "EBook")
                        .WithMany("Publishers")
                        .HasForeignKey("EBookID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PubHubWebServer.Data.Models.PubHubPublisher", "Publisher")
                        .WithMany("EBooks")
                        .HasForeignKey("PublisherID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EBook");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.Relationships.PubHubEBookPubHubReader", b =>
                {
                    b.HasOne("PubHubWebServer.Data.Models.PubHubEBook", "EBook")
                        .WithMany("Readers")
                        .HasForeignKey("EBookID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PubHubWebServer.Data.Models.PubHubReader", "Reader")
                        .WithMany("EBooks")
                        .HasForeignKey("ReaderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EBook");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.Relationships.PubHubEBookPubHubSubscription", b =>
                {
                    b.HasOne("PubHubWebServer.Data.Models.PubHubEBook", "EBook")
                        .WithMany("Subscriptions")
                        .HasForeignKey("EBookID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PubHubWebServer.Data.Models.PubHubSubscription", "Subscription")
                        .WithMany("EBooks")
                        .HasForeignKey("SubscriptionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EBook");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.Relationships.PubHubSubscriptionPubHubReader", b =>
                {
                    b.HasOne("PubHubWebServer.Data.Models.PubHubReader", "Reader")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ReaderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PubHubWebServer.Data.Models.PubHubSubscription", "Subscription")
                        .WithMany("Reader")
                        .HasForeignKey("SubscriptionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reader");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.Relationships.PubHubSupscriptionPubHubPublisher", b =>
                {
                    b.HasOne("PubHubWebServer.Data.Models.PubHubPublisher", "Publisher")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PublisherID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PubHubWebServer.Data.Models.PubHubSubscription", "Subscription")
                        .WithMany("Publisher")
                        .HasForeignKey("SubscriptionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.PubHubEBook", b =>
                {
                    b.Navigation("Publishers");

                    b.Navigation("Readers");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.PubHubPublisher", b =>
                {
                    b.Navigation("EBooks");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.PubHubReader", b =>
                {
                    b.Navigation("EBooks");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("PubHubWebServer.Data.Models.PubHubSubscription", b =>
                {
                    b.Navigation("EBooks");

                    b.Navigation("Publisher");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("PubHubWebServer.Data.ApplicationUser", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
